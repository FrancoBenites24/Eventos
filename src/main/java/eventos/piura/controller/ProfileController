package eventos.piura.controller;

import eventos.piura.model.User;
import eventos.piura.model.UserProfile;
import eventos.piura.services.UserProfileService;
import eventos.piura.services.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/profile")
public class ProfileController {

    private static final Logger logger = LoggerFactory.getLogger(ProfileController.class);
    
    private final UserProfileService profileService;
    private final UserService userService;

    public ProfileController(UserProfileService profileService, UserService userService) {
        this.profileService = profileService;
        this.userService = userService;
    }

    // Mostrar perfil del usuario actual (autenticado)
    @GetMapping
    public String showCurrentProfile(Model model, RedirectAttributes redirectAttributes) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String username = authentication.getName();
            
            logger.info("Usuario autenticado: {}", username);
            
            User user = userService.findByUsername(username)
                    .orElseThrow(() -> new RuntimeException("Usuario no encontrado: " + username));
            
            logger.info("Usuario encontrado: {}", user.getUsername());
            
            UserProfile profile = user.getProfile();
            
            if (profile == null) {
                logger.info("Creando nuevo perfil para el usuario: {}", username);
                profile = profileService.createProfileForUser(user);
                user.setProfile(profile);
                userService.save(user);
                logger.info("Perfil creado con ID: {}", profile.getId());
            } else {
                logger.info("Perfil existente con ID: {}", profile.getId());
            }
            
            model.addAttribute("user", profile);
            return "profile";
        } catch (Exception e) {
            logger.error("Error al cargar el perfil: {}", e.getMessage(), e);
            redirectAttributes.addFlashAttribute("error", "No se pudo cargar tu perfil: " + e.getMessage());
            return "redirect:/";
        }
    }

    // Mostrar perfil por ID
    @GetMapping("/{id}")
    public String showProfile(@PathVariable Long id, Model model) {
        UserProfile profile = profileService.findById(id)
                .orElseThrow(() -> new RuntimeException("Perfil no encontrado con ID: " + id));
        
        model.addAttribute("user", profile);
        return "profile";
    }

    // Mostrar formulario de edición
    @GetMapping("/{id}/edit")
    public String showEditForm(@PathVariable Long id, Model model) {
        UserProfile profile = profileService.findById(id)
                .orElseThrow(() -> new RuntimeException("Perfil no encontrado con ID: " + id));

        model.addAttribute("user", profile);
        return "edit-profile";
    }

    // Procesar actualización del perfil
    @PostMapping("/{id}/update")
    public String updateProfile(@PathVariable Long id,
                               @Valid @ModelAttribute("user") UserProfile updatedProfile,
                               BindingResult result,
                               RedirectAttributes redirectAttributes) {

        if (result.hasErrors()) {
            return "edit-profile";
        }

        UserProfile existingProfile = profileService.findById(id)
                .orElseThrow(() -> new RuntimeException("Perfil no encontrado con ID: " + id));

        // Actualizar solo los campos editables del perfil
        existingProfile.setName(updatedProfile.getName());
        existingProfile.setPhone(updatedProfile.getPhone());
        existingProfile.setLocation(updatedProfile.getLocation());
        existingProfile.setBio(updatedProfile.getBio());

        profileService.save(existingProfile);

        redirectAttributes.addFlashAttribute("success", "Perfil actualizado correctamente");
        return "redirect:/profile/" + id;
    }
}